import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
import { IntegrationAppApiClient } from '../api-client';
import { OpenConfigurationOptions } from '../iframe';
import { CreateFieldMappingInstanceRequest, CreateFieldMappingRequest, FieldMappingInstanceSelector, FindFieldMappingInstancesQuery, FindFieldMappingsQuery, ListFieldMappingInstancesForConnectionQuery, ListFieldMappingsForIntegrationQuery, UpdateFieldMappingInstanceRequest, UpdateFieldMappingRequest } from './api';
import { InstanceKeyQuery } from '../integration-elements/common';
import { ConnectionLevelElementAccessor, ConnectionLevelElementsListAccessor } from '../integration-elements/connection-level-element.accessor';
import { IntegrationLevelElementAccessor, IntegrationLevelElementsListAccessor } from '../integration-elements/integration-level-element.accessor';
import { FieldMapping, FieldMappingInstance, FieldMappingSelector } from '.';
export interface OpenFieldMappingInstanceConfigurationOptions extends OpenConfigurationOptions {
}
export declare class FieldMappingsAccessor extends ElementListAccessor<FieldMapping, FindFieldMappingsQuery, CreateFieldMappingRequest> {
    constructor(client: IntegrationAppApiClient);
}
export declare class FieldMappingAccessor extends ElementAccessor<FieldMapping, UpdateFieldMappingRequest, FieldMappingSelector> {
    constructor(client: IntegrationAppApiClient, selector: string | FieldMappingSelector);
    getAppSchema(): Promise<any>;
    apply(integrationKeys: string[]): Promise<FieldMapping[]>;
    reset(): Promise<any>;
}
export declare class FieldMappingInstancesAccessor extends ElementInstanceListAccessor<FieldMappingInstance, FindFieldMappingInstancesQuery> {
    constructor(client: IntegrationAppApiClient);
}
export declare class FieldMappingInstanceAccessor extends ElementInstanceAccessor<FieldMappingInstance, FieldMappingInstanceSelector, CreateFieldMappingInstanceRequest, UpdateFieldMappingInstanceRequest> {
    private client;
    constructor(client: IntegrationAppApiClient, selector: string | FieldMappingInstanceSelector);
    setup(): Promise<void>;
    reset(): Promise<void>;
    openConfiguration({ onClose, }?: OpenFieldMappingInstanceConfigurationOptions): Promise<void>;
}
export declare class IntegrationLevelFieldMappingAccessor extends IntegrationLevelElementAccessor<FieldMapping, UpdateFieldMappingRequest> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    fieldMappingSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string, fieldMappingSelector: string);
}
export declare class IntegrationLevelFieldMappingsListAccessor extends IntegrationLevelElementsListAccessor<FieldMapping, ListFieldMappingsForIntegrationQuery, Omit<CreateFieldMappingRequest, 'integrationId'>> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string);
}
export declare class ConnectionLevelFieldMappingAccessor extends ConnectionLevelElementAccessor<FieldMappingInstance, UpdateFieldMappingInstanceRequest> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    fieldMappingSelector: string;
    query: InstanceKeyQuery;
    constructor(client: IntegrationAppApiClient, connectionSelector: string, fieldMappingSelector: string, query: InstanceKeyQuery);
    openConfiguration({ onClose, }?: OpenFieldMappingInstanceConfigurationOptions): Promise<void>;
}
export declare class ConnectionLevelFieldMappingsAccessor extends ConnectionLevelElementsListAccessor<FieldMapping, ListFieldMappingInstancesForConnectionQuery> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    constructor(client: IntegrationAppApiClient, connectionSelector: string);
}
