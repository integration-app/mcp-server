import { Connection } from '../connections';
import { DataSchema } from '../data-schema';
import { DataSourceInstance } from '../data-sources';
import { ErrorData } from '../errors';
import { AppliedToIntegrations, Integration } from '../integrations';
import { User } from '../users';
export * from './accessors';
export * from './api';
export * from './merge/merge-with-formulas';
export * from './types';
export declare enum FieldMappingDirection {
    IMPORT = "import",
    EXPORT = "export",
    BOTH = "both"
}
export interface FieldMapping {
    id: string;
    name: string;
    key: string;
    revision: string;
    publishedRevision?: string;
    universalFieldMappingId?: string;
    universalFieldMappingRevision?: string;
    integrationId?: string;
    integration?: Integration;
    dataSourceId: string;
    dataSourceKey: string;
    appSchema: DataSchema;
    direction: FieldMappingDirection;
    defaultImportValue?: any;
    defaultExportValue?: any;
    importValue?: any;
    exportValue?: any;
    frozenImportFields?: any;
    frozenExportFields?: any;
    frozenUnifiedExportFields?: any;
    archivedAt?: string;
    customized?: boolean;
    appliedToIntegrations?: AppliedToIntegrations<FieldMapping>;
}
export interface FieldMappingInstance {
    id: string;
    name?: string;
    userId: string;
    revision: string;
    user?: User;
    connectionId: string;
    connection?: Connection;
    integrationId: string;
    integration?: Integration;
    fieldMappingRevision?: string;
    fieldMappingId?: string;
    fieldMapping?: FieldMapping;
    instanceKey?: string;
    dataSourceInstanceId?: string;
    dataSourceInstance?: DataSourceInstance;
    dataSourceSchema?: DataSchema;
    direction?: FieldMappingDirection;
    appSchema?: DataSchema;
    importValue?: any;
    exportValue?: any;
    isCustomized?: boolean;
    unifiedExportValue?: any;
    unifiedImportValue?: any;
    frozenImportFields?: string[];
    frozenExportFields?: string[];
    error?: ErrorData;
    externalSchema?: any;
}
