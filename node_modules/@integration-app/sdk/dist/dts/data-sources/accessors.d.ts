import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
import { IntegrationAppApiClient } from '../api-client';
import { DataCollectionCreateRequest, DataCollectionCreateResponse, DataCollectionDeleteResponse, DataCollectionFindByIdRequest, DataCollectionFindByIdResponse, DataCollectionFindRequest, DataCollectionFindResponse, DataCollectionListRequest, DataCollectionListResponse, DataCollectionMatchRequest, DataCollectionMatchResponse, DataCollectionSearchRequest, DataCollectionSearchResponse, DataCollectionSpec, DataCollectionUpdateRequest, DataCollectionUpdateResponse } from '../connectors/data-locations';
import { OpenConfigurationOptions } from '../iframe';
import { CreateDataSourceInstanceRequest, CreateDataSourceRequest, DataSourceInstanceSelector, FindDataSourceInstancesQuery, FindDataSourcesQuery, ListDataSourceInstancesForConnectionQuery, ListDataSourcesForIntegrationQuery, UpdateDataSourceInstanceRequest, UpdateDataSourceRequest } from './api';
import { InstanceKeyQuery } from '../integration-elements/common';
import { ConnectionLevelElementAccessor, ConnectionLevelElementsListAccessor } from '../integration-elements/connection-level-element.accessor';
import { IntegrationLevelElementAccessor, IntegrationLevelElementsListAccessor } from '../integration-elements/integration-level-element.accessor';
import { DataSource, DataSourceInstance, DataSourceSelector } from '.';
export interface OpenDataSourceConfigurationOptions extends OpenConfigurationOptions {
}
export declare class DataSourcesAccessor extends ElementListAccessor<DataSource, FindDataSourcesQuery, CreateDataSourceRequest> {
    constructor(client: IntegrationAppApiClient);
}
export declare class DataSourceAccessor extends ElementAccessor<DataSource, UpdateDataSourceRequest, DataSourceSelector> {
    constructor(client: IntegrationAppApiClient, selector: DataSourceSelector | string);
    apply(integrationKeys: string[]): Promise<DataSource[]>;
    reset(): Promise<any>;
}
export declare class DataSourceInstancesAccessor extends ElementInstanceListAccessor<DataSourceInstance, FindDataSourceInstancesQuery> {
    constructor(client: IntegrationAppApiClient);
}
export declare class DataSourceInstanceAccessor extends ElementInstanceAccessor<DataSourceInstance, DataSourceInstanceSelector, CreateDataSourceInstanceRequest, UpdateDataSourceInstanceRequest> {
    client: IntegrationAppApiClient;
    constructor(client: IntegrationAppApiClient, selector: string | DataSourceInstanceSelector);
    setup(): Promise<void>;
    reset(): Promise<void>;
    openConfiguration({ onClose, }?: OpenDataSourceConfigurationOptions): Promise<void>;
    unifiedFieldsToNative(unifiedFields: any): Promise<any>;
    getCollection(): Promise<DataCollectionSpec>;
    listRecords(request?: DataCollectionListRequest): Promise<DataCollectionListResponse>;
    matchRecord(request: DataCollectionMatchRequest): Promise<DataCollectionMatchResponse>;
    searchRecords(request: DataCollectionSearchRequest): Promise<DataCollectionSearchResponse>;
    findRecordById(request: string | DataCollectionFindByIdRequest): Promise<DataCollectionFindByIdResponse>;
    createRecord(request: DataCollectionCreateRequest): Promise<DataCollectionCreateResponse>;
    updateRecord(request: DataCollectionUpdateRequest): Promise<DataCollectionUpdateResponse>;
    deleteRecord(request: string | DataCollectionFindByIdRequest): Promise<DataCollectionDeleteResponse>;
    findRecords(request?: DataCollectionFindRequest): Promise<DataCollectionFindResponse>;
}
export declare class IntegrationLevelDataSourceAccessor extends IntegrationLevelElementAccessor<DataSource, UpdateDataSourceRequest> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    dataSourceSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string, dataSourceSelector: string);
}
export declare class IntegrationLevelDataSourcesListAccessor extends IntegrationLevelElementsListAccessor<DataSource, ListDataSourcesForIntegrationQuery, Omit<CreateDataSourceRequest, 'integrationId'>> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string);
}
export declare class ConnectionLevelDataSourceAccessor extends ConnectionLevelElementAccessor<DataSourceInstance, UpdateDataSourceInstanceRequest> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    dataSourceSelector: string;
    query: InstanceKeyQuery;
    constructor(client: IntegrationAppApiClient, connectionSelector: string, dataSourceSelector: string, query: InstanceKeyQuery);
    openConfiguration(options?: OpenDataSourceConfigurationOptions): Promise<void>;
}
export declare class ConnectionLevelDataSourcesAccessor extends ConnectionLevelElementsListAccessor<DataSource, ListDataSourceInstancesForConnectionQuery> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    constructor(client: IntegrationAppApiClient, connectionSelector: string);
}
