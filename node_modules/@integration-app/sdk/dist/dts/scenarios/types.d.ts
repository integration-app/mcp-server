import { CreateActionRequest } from '../actions';
import { CreateAppDataSchemaRequest } from '../app-data-schemas';
import { CreateAppEventTypeRequest } from '../app-events';
import { MinimalConnector } from '../connectors';
import { CreateDataLinkTableRequest } from '../data-links';
import { CreateDataSourceRequest } from '../data-sources';
import { SearchQuery, PaginationQuery } from '../entity-repository';
import { CreateFieldMappingRequest } from '../field-mappings';
import { CreateFlowRequest } from '../flows';
import { IntegrationElementType } from '../integration-elements';
import { Integration } from '../integrations';
export interface Scenario {
    id: string;
    appId: string;
    name: string;
    key: string;
    scenarioTemplateId?: string;
    elements?: ScenarioElement[];
    connectors?: MinimalConnector[];
    todos?: ScenarioToDo[];
    appliedToIntegrations?: Integration[];
    archivedAt?: string;
}
export type ScenarioToDo = {
    name: string;
    description: string;
    isComplete: boolean;
};
export type ScenarioElement = {
    id: string;
    type: IntegrationElementType;
    element?: any;
};
export interface FindScenariosQuery extends SearchQuery, PaginationQuery {
}
export interface CreateScenarioRequest {
    name: string;
    key: string;
    elements?: ScenarioElement[];
    todos?: ScenarioToDo[];
}
export interface UpdateScenarioRequest {
    name?: string;
    key?: string;
    elements?: ScenarioElement[];
    todos?: ScenarioToDo[];
}
export interface ScenarioTemplate {
    id: string;
    name: string;
    key: string;
    shortDescription?: string;
    description?: string;
    demoWorkspaceKey?: string;
    demoAppUri?: string;
    demoGithubRepo?: string;
    demoVideoYoutubeUri?: string;
    tags?: string[];
    elements?: ScenarioTemplateElements;
    todos?: Omit<ScenarioToDo, 'isComplete'>[];
    connectors?: MinimalConnector[];
    handyElements?: HandyScenarioTemplateElement[];
}
export interface FindScenarioTemplatesQuery extends SearchQuery, PaginationQuery {
}
export interface CreateScenarioTemplateRequest {
    name: string;
    shortDescription?: string;
    description?: string;
    demoWorkspaceKey?: string;
    demoAppUri?: string;
    demoGithubRepo?: string;
    demoVideoYoutubeUri?: string;
    tags?: string[];
    elements?: ScenarioTemplateElements;
    todos?: Omit<ScenarioToDo, 'isComplete'>[];
}
export interface UpdateScenarioTemplateRequest {
    name?: string;
    key?: string;
    shortDescription?: string;
    description?: string;
    demoWorkspaceKey?: string;
    demoAppUri?: string;
    demoGithubRepo?: string;
    demoVideoYoutubeUri?: string;
    tags?: string[];
    elements?: ScenarioTemplateElements;
    todos?: Omit<ScenarioToDo, 'isComplete'>[];
}
export type ScenarioTemplateElementOverride = {
    type: IntegrationElementType;
    originalKey: string;
    name: string;
    key: string;
};
export type ScenarioTemplateKeyCollision = {
    type: IntegrationElementType;
    key: string;
};
export type ScenarioTemplateIntegration = {
    id?: string;
    connectorId: string;
    key: string;
    name: string;
    logoUri: string;
};
type WithIntegrationKeys<T> = T & {
    integrationKeys?: string[];
};
type ElementsExportFeilds = {
    flows?: Record<string, WithIntegrationKeys<CreateFlowRequest>>;
    actions?: Record<string, WithIntegrationKeys<CreateActionRequest>>;
    fieldMappings?: Record<string, WithIntegrationKeys<CreateFieldMappingRequest>>;
    dataSources?: Record<string, WithIntegrationKeys<CreateDataSourceRequest>>;
    dataLinkTables?: Record<string, CreateDataLinkTableRequest>;
    appEventTypes?: Record<string, CreateAppEventTypeRequest>;
    appDataSchemas?: Record<string, CreateAppDataSchemaRequest>;
};
export type ScenarioTemplateElements = ElementsExportFeilds & {
    integrations?: Record<string, ElementsExportFeilds & {
        connectorId: string;
    }>;
};
export interface HandyScenarioTemplateElement {
    type: IntegrationElementType;
    integration?: {
        key: string;
        connectorId: string;
    };
    integrations?: {
        key: string;
        connectorId: string;
    }[];
    fields: {
        key: string;
        name: string;
    } & Record<string, any>;
}
export {};
