import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
import { IntegrationAppApiClient } from '../api-client';
import { FlowRun } from '../flow-runs';
import { OpenConfigurationOptions } from '../iframe';
import { CreateFlowRequest, FindFlowInstancesQuery, FindFlowsQuery, FlowInstanceSelector, FlowSelector, ListFlowInstancesForConnectionQuery, ListFlowsForIntegrationQuery, ResetFlowInstanceOptions, RunFlowOptions, UpdateFlowRequest } from './api';
import { CreateFlowInstanceRequest, UpdateFlowInstanceRequest } from './schemas';
import { Flow, FlowInstance } from './types';
import { InstanceKeyQuery } from '../integration-elements/common';
import { ConnectionLevelElementAccessor, ConnectionLevelElementsListAccessor } from '../integration-elements/connection-level-element.accessor';
import { IntegrationLevelElementAccessor, IntegrationLevelElementsListAccessor } from '../integration-elements/integration-level-element.accessor';
export interface OpenFlowInstanceConfigurationOptions extends OpenConfigurationOptions {
    nodeKey?: string;
}
export interface OpenFlowInstanceEditorOptions extends OpenConfigurationOptions {
}
export declare class FlowsAccessor extends ElementListAccessor<Flow, FindFlowsQuery, CreateFlowRequest> {
    constructor(client: IntegrationAppApiClient);
}
export declare class FlowAccessor extends ElementAccessor<Flow, UpdateFlowRequest, FlowSelector> {
    constructor(client: IntegrationAppApiClient, selector: FlowSelector | string);
    apply(integrationKeys: string[]): Promise<Flow[]>;
    reset(): Promise<Flow>;
}
export declare class FlowInstancesAccessor extends ElementInstanceListAccessor<FlowInstance, FindFlowInstancesQuery> {
    constructor(client: IntegrationAppApiClient);
    create(data: CreateFlowInstanceRequest): Promise<FlowInstance>;
}
export declare class FlowInstanceAccessor extends ElementInstanceAccessor<FlowInstance, FlowInstanceSelector, CreateFlowInstanceRequest, UpdateFlowInstanceRequest> {
    protected client: IntegrationAppApiClient;
    protected selector: FlowInstanceSelector | string;
    constructor(client: IntegrationAppApiClient, selector: FlowInstanceSelector | string);
    enable(): Promise<FlowInstance>;
    disable(): Promise<FlowInstance>;
    updateToLatestFlow(): Promise<FlowInstance>;
    setup(): Promise<FlowInstance>;
    reset(options?: ResetFlowInstanceOptions): Promise<FlowInstance>;
    openConfiguration({ nodeKey, onClose, }?: OpenFlowInstanceConfigurationOptions): Promise<void>;
    openEditor({ onClose }?: OpenFlowInstanceEditorOptions): Promise<void>;
    startRun(options?: RunFlowOptions): Promise<FlowRun>;
    run(options?: RunFlowOptions): Promise<FlowRun>;
}
export declare class IntegrationLevelFlowAccessor extends IntegrationLevelElementAccessor<Flow, UpdateFlowRequest> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    flowSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string, flowSelector: string);
}
export declare class IntegrationLevelFlowsListAccessor extends IntegrationLevelElementsListAccessor<Flow, ListFlowsForIntegrationQuery, Omit<CreateFlowRequest, 'integrationId'>> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string);
}
export declare class ConnectionLevelFlowAccessor extends ConnectionLevelElementAccessor<FlowInstance, UpdateFlowInstanceRequest> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    flowSelector: string;
    query: InstanceKeyQuery;
    constructor(client: IntegrationAppApiClient, connectionSelector: string, flowSelector: string, query: InstanceKeyQuery);
    enable(): Promise<FlowInstance>;
    disable(): Promise<FlowInstance>;
    run(options: {
        nodeKey?: string;
        input?: any;
    }): Promise<FlowRun>;
    openConfiguration(options?: OpenFlowInstanceConfigurationOptions): Promise<void>;
    openEditor(options?: OpenFlowInstanceEditorOptions): Promise<void>;
}
export declare class ConnectionLevelFlowsAccessor extends ConnectionLevelElementsListAccessor<Flow, ListFlowInstancesForConnectionQuery> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    constructor(client: IntegrationAppApiClient, connectionSelector: string);
}
