import { ElementInstanceSelector, IntegrationSpecificElementSelector } from '../accessors';
import { ConnectionSelector } from '../connections';
import { DataSchema } from '../data-schema';
import { CommonInstancesListQuery, CommonIntegrationOrConnectionQuery, CommonListElementsQuery } from '../entity-repository';
import { FlowNodeLink } from '.';
export interface ListFlowsForIntegrationQuery extends CommonListElementsQuery {
    universalFlowId?: string | 'null';
}
export interface FindFlowsQuery extends ListFlowsForIntegrationQuery {
    integrationId?: string | 'null';
}
export interface CreateFlowNodeRequest {
    type: string;
    config?: any;
    ui?: any;
    links?: FlowNodeLink[];
}
export interface CreateFlowRequest {
    key: string;
    name: string;
    integrationId?: string;
    nodes?: Record<string, CreateFlowNodeRequest>;
    parametersSchema?: DataSchema;
    autoCreateInstances?: boolean;
}
export interface UpdateFlowRequest extends CreateFlowRequest {
    archivedAt?: string;
}
export interface FlowSelector extends IntegrationSpecificElementSelector {
    autoCreate?: boolean;
}
export type ListFlowInstancesForConnectionQuery = CommonInstancesListQuery & {
    flowId?: string;
    flowKey?: string;
    enabled?: boolean;
};
export type FindFlowInstancesQuery = ListFlowInstancesForConnectionQuery & CommonIntegrationOrConnectionQuery;
export interface FlowInstanceSelector extends ConnectionSelector, ElementInstanceSelector {
    flowId?: string;
    flowKey?: string;
    instanceKey?: string;
    autoUpdate?: boolean;
}
export interface ResetFlowInstanceOptions {
    name?: boolean;
    nodes?: Record<string, boolean>;
    allNodes?: boolean;
}
export interface RunFlowOptions {
    nodeKey?: string;
    input?: any;
    returnImmediately?: boolean;
    onUpdate?: (...args: any) => void;
}
