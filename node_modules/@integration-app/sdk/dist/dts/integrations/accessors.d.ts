import { ElementAccessor, ElementListAccessor } from '../accessors';
import { IntegrationAppApiClient } from '../api-client';
import { Connection, ConnectionSpec } from '../connections';
import { DataLocationListItem, DataLocationSpec, OperationListItem, OperationSpec } from '../connectors';
import { OpenConfigurationOptions } from '../iframe';
import { CreateIntegrationRequest, UpdateIntegrationRequest } from './api';
import { IntegrationLevelActionAccessor, IntegrationLevelActionsListAccessor } from '../actions';
import { IntegrationLevelDataSourceAccessor, IntegrationLevelDataSourcesListAccessor } from '../data-sources';
import { IntegrationLevelFieldMappingAccessor, IntegrationLevelFieldMappingsListAccessor } from '../field-mappings';
import { IntegrationLevelFlowAccessor, IntegrationLevelFlowsListAccessor } from '../flows';
import { FindIntegrationsQuery, Integration, OpenNewConnectionOptions } from '.';
interface OpenIntegrationUIIntegrationConfigurationOptions extends OpenConfigurationOptions {
}
export declare class IntegrationsAccessor extends ElementListAccessor<Integration, FindIntegrationsQuery, CreateIntegrationRequest> {
    constructor(client: IntegrationAppApiClient);
}
export declare class IntegrationAccessor extends ElementAccessor<Integration, UpdateIntegrationRequest> {
    private client;
    private integrationSelector;
    baseUri: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string);
    get actions(): IntegrationLevelActionsListAccessor;
    action(actionSelector: string): IntegrationLevelActionAccessor;
    get flows(): IntegrationLevelFlowsListAccessor;
    flow(flowSelector: string): IntegrationLevelFlowAccessor;
    get dataSources(): IntegrationLevelDataSourcesListAccessor;
    dataSource(dataSourceSelector: string): IntegrationLevelDataSourceAccessor;
    get fieldMappings(): IntegrationLevelFieldMappingsListAccessor;
    fieldMapping(fieldMappingSelector: string): IntegrationLevelFieldMappingAccessor;
    setup(): Promise<Integration>;
    resetParameters(): Promise<Integration>;
    getConnectorSpec(): Promise<ConnectionSpec>;
    open({ onClose, }?: OpenIntegrationUIIntegrationConfigurationOptions): Promise<void>;
    openNewConnection({ allowMultipleConnections, name, }?: OpenNewConnectionOptions): Promise<Connection>;
    connect({ name, parameters, authOptionKey, allowMultipleConnections, redirectUri, sameWindow, }?: {
        name?: string;
        parameters?: any;
        authOptionKey?: string;
        allowMultipleConnections?: boolean;
    } & ({
        sameWindow: true;
        redirectUri: string;
    } | {
        sameWindow?: false;
        redirectUri?: never;
    })): Promise<Connection | undefined>;
    createConnection({ parameters, name, }: {
        parameters?: any;
        name?: string;
    }): Promise<Connection | undefined>;
    disconnect(): Promise<void>;
    getOperations(): Promise<OperationListItem[]>;
    getOperation(key: string): Promise<OperationSpec>;
    getDataCollections(): Promise<DataLocationListItem[]>;
    getDataCollection(key: string): Promise<DataLocationSpec>;
    getDataLocations(): Promise<DataLocationListItem[]>;
    getDataLocation(key: string): Promise<DataLocationSpec>;
}
export {};
