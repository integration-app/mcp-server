import { ErrorData } from '../errors';
export declare enum ConnectorCopilotSuggestionType {
    AuthType = "auth-type",
    AuthImplementation = "auth-implementation",
    AuthConnectionParameters = "auth-connection-parameters",
    AuthApiClient = "auth-api-client",
    DataCollection = "data-collection",
    DataCollectionOperationApiRequests = "data-location-operation-api-requests",
    DataCollectionOperationApiRequestMapping = "data-location-operation-api-request-mapping",
    DataCollectionFieldsSchema = "data-location-fields-schema",
    UdmList = "udm-list",
    UdmFieldsMapping = "udm-fields-mapping",
    UdmFieldsMappingToCollection = "udm-fields-mapping-to-collection",
    UdmFieldsMappingFromCollection = "udm-fields-mapping-from-collection"
}
export interface ConnectorCopilotSuggestion {
    id?: string;
    type: ConnectorCopilotSuggestionType;
    dataCollectionKey?: string;
    title?: string;
    description?: string;
    parameters?: Record<string, any>;
    hash?: string;
    action?: ConnectorCopilotSuggestionAction;
    actions?: ConnectorCopilotSuggestionAction[];
}
type ConnectorCopilotSuggestionActionType = 'patch' | 'put' | 'patch-data-schema' | 'patch-field-mapping';
export interface ConnectorCopilotSuggestionAction {
    type: ConnectorCopilotSuggestionActionType;
    path: string;
    locator?: string;
    data: any;
    format?: 'value' | 'fields' | 'schema';
    schema?: any;
    variablesSchema?: any;
    parameters?: any;
}
export declare enum ConnectorCopilotFileChunkTopicKey {
    AuthType = "auth-type",
    AuthImplementation = "auth-implementation",
    AuthConnectionParameters = "auth-connection-parameters",
    AuthApiClient = "auth-api-client"
}
export declare enum CopilotTaskType {
    GenerateAuthType = "generate-auth-type",
    GenerateOAuthConfiguration = "generate-oauth-configuration",
    GenerateAuthConnectionParameters = "generate-auth-connection-parameters",
    GenerateAuthApiClient = "generate-auth-api-client",
    GenerateDataCollections = "generate-data-collections",
    GenerateDataCollectionRecordFromFields = "generate-data-collection-record-from-fields",
    GenerateDataCollectionOperationApiRequests = "generate-data-collection-operation-api-requests",
    GenerateDataCollectionOperationApiRequestMapping = "generate-data-collection-operation-api-request-mapping",
    GenerateDataCollectionFieldsSchema = "generate-data-collection-fields-schema",
    GenerateUdmList = "generate-udm-list",
    GenerateUdmFieldsMapping = "generate-udm-fields-mapping"
}
export declare enum CopilotTaskStatus {
    Pending = "pending",
    Running = "running",
    Completed = "completed",
    Failed = "failed"
}
export interface CopilotTask<ParameterClass = unknown> {
    id: string;
    name: string;
    type: CopilotTaskType;
    parameters: ParameterClass;
    status: CopilotTaskStatus;
    startedTimestamp: number;
    endedTimestamp: number;
    error: ErrorData;
}
export declare enum CopilotActionType {
    PatchConnectorFile = "patch",
    PutConnectorFile = "put",
    PatchConnectorDataSchema = "patch-data-schema",
    PatchConnectorFieldMapping = "patch-field-mapping",
    SetConnectorAuthType = "set-connector-auth-type"
}
export declare enum CopilotActionStatus {
    Suggested = "suggested",
    Executed = "executed",
    Rejected = "rejected"
}
export interface CopilotAction {
    id: string;
    copilotTaskId: string;
    type: CopilotActionType;
    status: CopilotActionStatus;
    name: string;
    description?: string;
    parameters?: unknown;
    hash?: string;
    references?: CopilotActionReference[];
}
export declare enum CopilotActivityType {
    Task = "task"
}
export interface CopilotActivityDataTask {
    taskId: string;
}
export interface CopilotActivity<DataClass = unknown> {
    type: CopilotActivityType;
    text: string;
    data: DataClass;
    scopes: string[];
    timestamp: number;
}
export interface CopilotActionReference {
    id: string;
    snippet: string;
    quotes?: string[];
    file: {
        name: string;
        sourceUri?: string;
    };
}
export declare const CopilotActivityScope: {
    connector: (connectorId: string) => CopilotActivityScopeConnector;
};
declare class CopilotActivityScopeConnector {
    private connectorId;
    constructor(connectorId: string);
    auth: () => CopilotActivityScopeConnectorAuth;
    data: (key?: string) => CopilotActivityScopeConnectorData;
    udm: (key?: string) => CopilotActivityScopeConnectorUdm;
    toString(): string;
}
declare class CopilotActivityScopeConnectorAuth {
    private connectorScope;
    constructor(connectorScope: CopilotActivityScopeConnector);
    toString(): string;
}
declare class CopilotActivityScopeConnectorData {
    private connectorScope;
    private dataCollectionKey;
    constructor(connectorScope: CopilotActivityScopeConnector, dataCollectionKey: string | undefined);
    method: (key: string) => CopilotActivityScopeConnectorDataMethod;
    toString(): string;
}
declare class CopilotActivityScopeConnectorDataMethod {
    private collectionScope;
    private methodKey;
    constructor(collectionScope: CopilotActivityScopeConnectorData, methodKey: string);
    toString(): string;
}
declare class CopilotActivityScopeConnectorUdm {
    private connectorScope;
    private key?;
    constructor(connectorScope: CopilotActivityScopeConnector, key?: string | undefined);
    collection: (key: string) => CopilotActivityScopeConnectorUdmCollection;
    toString(): string;
}
declare class CopilotActivityScopeConnectorUdmCollection {
    private udmScope;
    private key;
    constructor(udmScope: CopilotActivityScopeConnectorUdm, key: string);
    toString(): string;
}
export {};
