import { CreateConnectionRequest, FindConnectionsQuery, UpdateConnectionRequest } from './api';
import { ElementInstanceListAccessor } from '../accessors';
import { ConnectionLevelActionAccessor, ConnectionLevelActionsAccessor } from '../actions';
import { IntegrationAppApiClient } from '../api-client';
import { DataCollectionCreateRequest, DataCollectionCreateResponse, DataCollectionDeleteRequest, DataCollectionDeleteResponse, DataCollectionFindByIdRequest, DataCollectionFindByIdResponse, DataCollectionListRequest, DataCollectionListResponse, DataCollectionMatchRequest, DataCollectionMatchResponse, DataCollectionSearchRequest, DataCollectionSearchResponse, DataCollectionSpec, DataCollectionUpdateRequest, DataCollectionUpdateResponse, DataDirectoryListRequest, DataDirectoryListResponse } from '../connectors';
import { OperationRunRequest, OperationRunResponse, OperationSpec } from '../connectors/operations/types';
import { ConnectionLevelDataSourceAccessor, ConnectionLevelDataSourcesAccessor } from '../data-sources';
import { ConnectionLevelFieldMappingAccessor, ConnectionLevelFieldMappingsAccessor } from '../field-mappings';
import { ConnectionLevelFlowAccessor, ConnectionLevelFlowsAccessor } from '../flows';
import { OpenConfigurationOptions } from '../iframe';
import { InstanceKeyQuery } from '../integration-elements/common';
import { Connection } from '.';
export declare class ConnectionsAccessor extends ElementInstanceListAccessor<Connection, FindConnectionsQuery> {
    constructor(client: IntegrationAppApiClient);
    create(data: CreateConnectionRequest): Promise<Connection>;
}
export declare class ConnectionAccessor {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    constructor(client: IntegrationAppApiClient, connectionSelector: string);
    get actions(): ConnectionLevelActionsAccessor;
    action(actionSelector: string, query?: InstanceKeyQuery): ConnectionLevelActionAccessor;
    get flows(): ConnectionLevelFlowsAccessor;
    flow(flowSelector: string, query?: InstanceKeyQuery): ConnectionLevelFlowAccessor;
    get dataSources(): ConnectionLevelDataSourcesAccessor;
    dataSource(dataSourceSelector: string, query?: InstanceKeyQuery): ConnectionLevelDataSourceAccessor;
    get fieldMappings(): ConnectionLevelFieldMappingsAccessor;
    fieldMapping(fieldMappingSelector: string, query?: InstanceKeyQuery): ConnectionLevelFieldMappingAccessor;
    get(query?: {
        includeSecrets?: boolean;
    }): Promise<Connection>;
    patch(data: UpdateConnectionRequest): Promise<Connection>;
    put(data: UpdateConnectionRequest): Promise<Connection>;
    archive(): Promise<void>;
    request(path: string, data?: any): Promise<any>;
    get proxy(): ConnectionProxy;
    operation(key: string): ConnectionOperationAccessor;
    dataCollection(key: string, parameters?: Record<string, any>): ConnectionDataCollectionAccessor;
    dataDirectory(key: string, parameters?: Record<string, any>): ConnectionDataDirectoryAccessor;
    reconnect({ parameters, authOptionKey, }?: {
        parameters?: any;
        authOptionKey?: string;
    }): Promise<Connection | undefined>;
    openReconnectUI({}?: OpenConfigurationOptions): Promise<void>;
    refreshCredentials(): Promise<void>;
    getPath(subpath?: string, query?: Record<string, any>): string;
}
export declare class ConnectionOperationAccessor {
    client: IntegrationAppApiClient;
    connectionAccessor: ConnectionAccessor;
    key: string;
    constructor(client: IntegrationAppApiClient, connectionAccessor: ConnectionAccessor, key: string);
    get(): Promise<OperationSpec>;
    run(request?: OperationRunRequest): Promise<OperationRunResponse>;
}
export declare class ConnectionDataDirectoryAccessor {
    client: IntegrationAppApiClient;
    connectionAccessor: ConnectionAccessor;
    key: string;
    parameters: Record<string, any>;
    constructor(client: IntegrationAppApiClient, connectionAccessor: ConnectionAccessor, key: string, parameters: Record<string, any>);
    list(request?: DataDirectoryListRequest): Promise<DataDirectoryListResponse>;
}
export declare class ConnectionDataCollectionAccessor {
    client: IntegrationAppApiClient;
    connectionAccessor: ConnectionAccessor;
    key: string;
    parameters: Record<string, any>;
    constructor(client: IntegrationAppApiClient, connectionAccessor: ConnectionAccessor, key: string, parameters: Record<string, any>);
    get(): Promise<DataCollectionSpec>;
    findById(request?: DataCollectionFindByIdRequest): Promise<DataCollectionFindByIdResponse>;
    list(request?: DataCollectionListRequest): Promise<DataCollectionListResponse>;
    search(request?: DataCollectionSearchRequest): Promise<DataCollectionSearchResponse>;
    match(request?: DataCollectionMatchRequest): Promise<DataCollectionMatchResponse>;
    create(request?: DataCollectionCreateRequest): Promise<DataCollectionCreateResponse>;
    update(request?: DataCollectionUpdateRequest): Promise<DataCollectionUpdateResponse>;
    delete(request?: DataCollectionDeleteRequest): Promise<DataCollectionDeleteResponse>;
}
export declare class ConnectionProxy {
    private connection;
    constructor(connection: ConnectionAccessor);
    get(path: string): Promise<any>;
    post(path: string, data?: any): Promise<any>;
    put(path: string, data?: any): Promise<any>;
    patch(path: string, data?: any): Promise<any>;
    delete(path: string): Promise<any>;
    private getProxyPath;
}
