import { Connection } from '../connections';
import { DataSourceUnitConfig } from '../data-sources';
import { ErrorData } from '../errors';
import { AppliedToIntegrations, Integration } from '../integrations';
import { Customer } from '../users';
export declare enum ExternalEventType {
    DataRecordCreated = "data-record-created",
    DataRecordUpdated = "data-record-updated",
    DataRecordDeleted = "data-record-deleted",
    ConnectorEvent = "connector-event"
}
export declare enum ExternalEventSubscriptionStatus {
    Subscribed = "subscribed",
    Unsubscribed = "unsubscribed",
    Error = "error"
}
export declare enum ExternalEventPullStatus {
    RUNNING = "running",
    SUCCESS = "success",
    ERROR = "error",
    QUEUED = "queued"
}
export declare enum IncomingWebhooksState {
    QUEUED = "queued",
    RUNNING = "running",
    SUCCESS = "success",
    ERROR = "error"
}
export interface ExternalEventUnitConfig {
    type: ExternalEventType;
    dataSource?: DataSourceUnitConfig;
    eventKey?: string;
    eventParameters?: any;
}
export declare enum ExternalEventSubscriptionType {
    DataRecordCreated = "data-record-created",
    DataRecordUpdated = "data-record-updated",
    DataRecordDeleted = "data-record-deleted",
    ConnectorEvent = "connector-event"
}
export interface ExternalEventSubscriptionConfig {
    type: ExternalEventSubscriptionType;
    dataSource?: DataSourceUnitConfig;
    eventKey?: string;
    eventParameters?: any;
}
export interface ExternalEvent {
    config?: ExternalEventUnitConfig;
    appliedToIntegrations?: AppliedToIntegrations<ExternalEvent>;
}
export interface ExternalEventSubscription {
    id: string;
    name?: string;
    userId: string;
    user?: Customer;
    connectionId: string;
    connection?: Connection;
    integrationId: string;
    integration?: Integration;
    uuid: string;
    config?: ExternalEventSubscriptionConfig;
    status?: ExternalEventSubscriptionStatus;
    isRealTime?: boolean;
    requiresPull?: boolean;
    requiresFullSync?: boolean;
    error?: ErrorData;
    createdAt?: string;
    archivedAt?: string;
    stateData?: any;
    nextPullEventsTimestamp?: number;
    pullUpdatesIntervalSeconds?: number;
    fullSyncIntervalSeconds?: number;
    nextRefreshTimestamp?: number;
    globalWebhookKey?: string;
    globalWebhookEventSelector?: string;
}
export interface ExternalEventLogRecord {
    id: string;
    userId: string;
    user?: Customer;
    externalEventSubscriptionId: string;
    externalEventSubscription?: ExternalEventSubscription;
    integrationId: string;
    integration?: Integration;
    connectionId: string;
    connection?: Connection;
    payload?: any;
    launchedFlowRunIds?: string[];
}
export interface ExternalEventCustomPullSubscribeResponse {
    state: Record<string, any>;
}
export interface ExternalEventCustomPullCollectEventsRequest {
    state: Record<string, any>;
}
export interface ExternalEventCustomPullCollectEventsResponse<EventPayload = any> {
    events: EventPayload[];
    state: Record<string, any>;
}
export interface ExternalEventWebhookSubscribeRequest {
    webhookUri: string;
}
export interface ExternalEventWebhookSubscribeResponse {
    state?: Record<string, any>;
    nextRefreshTimestamp?: number;
}
export interface ExternalEventWebhookUnsubscribeRequest {
    state: Record<string, any>;
}
export interface ExternalEventWebhookHandleRequest {
    state: Record<string, any>;
    query: Record<string, string>;
    data: any;
    headers: any;
}
export interface ExternalEventWebhookHandleResponse<EventPayload = any> {
    events?: EventPayload[];
    response?: {
        headers?: Record<string, string>;
        data?: any;
    };
    state?: Record<string, any>;
}
export interface ExternalEventWebhookRefreshRequest {
    state: Record<string, any>;
    webhookUri: string;
}
export interface ExternalEventWebhookRefreshResponse {
    state?: Record<string, any>;
    nextRefreshTimestamp?: number;
}
export interface ExternalEventPull {
    id: string;
    userId: string;
    user?: Customer;
    externalEventSubscriptionId: string;
    externalEventSubscription?: ExternalEventSubscription;
    integrationId: string;
    integration?: Integration;
    connectionId: string;
    connection?: Connection;
    startDatetime: string;
    endDatetime: string;
    isFullScan?: boolean;
    status: ExternalEventPullStatus;
    collectedEventIds: string[];
    error?: ErrorData;
}
