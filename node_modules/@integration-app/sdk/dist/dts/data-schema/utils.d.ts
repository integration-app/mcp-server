import { DataLocationPointer } from '../connectors';
import { DataSchema } from './types';
export declare function buildDataSchema(value: any, variablesSchema?: any): any;
export declare function updateImpliedSchema({ schema, value, variablesSchema, }: {
    schema: DataSchema | undefined;
    value: any;
    variablesSchema?: DataSchema;
}): DataSchema | undefined;
export declare function updateImpliedSchema({ schema, value, variablesSchema, }: {
    schema: DataSchema;
    value: any;
    variablesSchema?: DataSchema | undefined;
}): DataSchema;
export declare function schemaHasProperties(schema?: DataSchema): boolean;
export declare function nonEmptyObjectProperties(properties: Record<string, DataSchema | undefined | null>): Record<string, DataSchema>;
export declare function getSchemaFromValue(value: any, variablesSchema: any, ignoreFormulas?: boolean): any;
export declare function schemaTypeFromValue(value: any): "object" | "boolean" | "number" | "string" | "array" | undefined;
export interface ValueToSchemaOptions {
    addDefaults?: boolean;
    skipUnknownFields?: boolean;
    skipReadOnlyFields?: boolean;
    normalizeValues?: boolean;
    valueHasFormulas?: boolean;
}
export declare function valueToSchema(value: any, schema: DataSchema | undefined, options?: ValueToSchemaOptions, field?: string): any;
export declare function schemaIsScalar(schema: DataSchema): boolean;
export declare function schemaHasFixedValues(schema: DataSchema): boolean;
export declare function schemaAllowsCustomValue(schema: DataSchema): boolean | undefined;
export declare function schemaIsNumber(schema: DataSchema): boolean;
export declare function schemaWithTitle(schema: DataSchema, title: string): DataSchema;
export declare function schemaWithTitle(schema: DataSchema | undefined, title: string): DataSchema | undefined;
export declare function pickFieldsFromSchema(schema: DataSchema | undefined, fields: string[] | undefined): any;
export declare function excludeReadOnlyFieldsFromSchema(schema?: DataSchema): DataSchema | undefined;
export declare function excludeWriteOnlyFieldsFromSchema(schema?: DataSchema): DataSchema | undefined;
export declare function excludeFieldsFromSchema(schema: DataSchema | undefined, fields: string[] | undefined): any;
export declare function getRequiredFieldsFromSchema(schema: DataSchema): string[];
export declare function addRequiredFieldsToSchema(schema: DataSchema | undefined, fields: string[] | undefined): any;
export declare function removeRequiredFieldsFromSchema(schema: DataSchema): any;
export declare function getMissingRequiredFields(schema: DataSchema | undefined, value: any): string[];
export declare function populateSchemaTitles(schema: DataSchema | undefined): DataSchema | undefined;
export declare function populateSchemaTitles(schema: DataSchema): DataSchema;
export declare function generateExampleFromSchema(schema: DataSchema | undefined): any;
export declare function isSchemaEmpty(schema: DataSchema): boolean;
export declare function compressDataSchema(schema: DataSchema): DataSchema;
export declare function getReferenceCollectionPointerForSchema(schema: DataSchema | undefined): DataLocationPointer | undefined;
export declare function getReferenceCollectionPathForSchema(schema: DataSchema | undefined): string | undefined;
export declare function walkSchema(schema: DataSchema | undefined, callback: (schema: DataSchema, locator: string) => DataSchema | undefined, locator?: string): DataSchema | undefined;
