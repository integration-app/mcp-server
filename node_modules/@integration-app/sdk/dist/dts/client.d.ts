import { ActionAccessor, ActionInstanceAccessor, ActionInstancesAccessor, ActionInstanceSelector, ActionsAccessor, ActionSelector } from './actions';
import { IntegrationAppApiClient, IntegrationAppClientOptions } from './api-client';
import { AppDataSchemaAccessor, AppDataSchemaInstanceAccessor, AppDataSchemaInstanceSelector, AppDataSchemaInstancesAccessor, AppDataSchemasAccessor } from './app-data-schemas';
import { AppEventSubscriptionAccessor, AppEventSubscriptionSelector, AppEventSubscriptionsAccessor, AppEventTypeAccessor, AppEventTypesAccessor, AppEventsAccessor } from './app-events';
import { SelfAccessor } from './auth';
import { ConnectionAccessor, ConnectionsAccessor } from './connections';
import { DataLinkTableAccessor, DataLinkTableInstanceAccessor, DataLinkTableInstanceSelector, DataLinkTableInstancesAccessor, DataLinkTablesAccessor } from './data-links';
import { DataSourceAccessor, DataSourceInstanceAccessor, DataSourceInstanceSelector, DataSourceInstancesAccessor, DataSourceSelector, DataSourcesAccessor } from './data-sources';
import { ExternalEventSubscriptionAccessor, ExternalEventSubscriptionsAccessor } from './external-events';
import { FieldMappingAccessor, FieldMappingInstanceAccessor, FieldMappingInstanceSelector, FieldMappingInstancesAccessor, FieldMappingSelector, FieldMappingsAccessor } from './field-mappings';
import { FlowRunAccessor, FlowRunsAccessor } from './flow-runs';
import { FlowAccessor, FlowInstanceAccessor, FlowInstanceSelector, FlowInstancesAccessor, FlowSelector, FlowsAccessor } from './flows';
import { OpenConfigurationOptions } from './iframe';
import { IntegrationAccessor, IntegrationsAccessor } from './integrations';
import { ScenarioAccessor, ScenariosAccessor } from './scenarios';
import { ScreenSelector } from './screens';
import { ScreenAccessor, ScreensAccessor } from './screens/accessors';
import { CustomerAccessor, CustomersAccessor, CustomerSelector } from './users';
interface OpenIntegrationAppConfigurationOptions extends OpenConfigurationOptions {
}
export declare class IntegrationAppClient extends IntegrationAppApiClient {
    constructor(options: IntegrationAppClientOptions);
    get self(): SelfAccessor;
    get flows(): FlowsAccessor;
    open({ onClose, }?: OpenIntegrationAppConfigurationOptions): Promise<void>;
    action(selector: string | ActionSelector): ActionAccessor;
    get actions(): ActionsAccessor;
    screen(selector: string | ScreenSelector): ScreenAccessor;
    get screens(): ScreensAccessor;
    actionInstance(selector: string | ActionInstanceSelector): ActionInstanceAccessor;
    get actionInstances(): ActionInstancesAccessor;
    flow(selector: string | FlowSelector): FlowAccessor;
    get flowInstances(): FlowInstancesAccessor;
    flowInstance(selector: string | FlowInstanceSelector): FlowInstanceAccessor;
    get dataSourceInstances(): DataSourceInstancesAccessor;
    get dataSources(): DataSourcesAccessor;
    dataSource(selector: string | DataSourceSelector): DataSourceAccessor;
    dataSourceInstance(selector: string | DataSourceInstanceSelector): DataSourceInstanceAccessor;
    get fieldMappings(): FieldMappingsAccessor;
    fieldMapping(selector: string | FieldMappingSelector): FieldMappingAccessor;
    get fieldMappingInstances(): FieldMappingInstancesAccessor;
    fieldMappingInstance(selector: string | FieldMappingInstanceSelector): FieldMappingInstanceAccessor;
    get dataLinkTables(): DataLinkTablesAccessor;
    dataLinkTable(idOrKey: string): DataLinkTableAccessor;
    get dataLinkTableInstances(): DataLinkTableInstancesAccessor;
    dataLinkTableInstance(selector: string | DataLinkTableInstanceSelector): DataLinkTableInstanceAccessor;
    get integrations(): IntegrationsAccessor;
    externalEventSubscriptions(): ExternalEventSubscriptionsAccessor;
    externalEventSubscription(id: string): ExternalEventSubscriptionAccessor;
    integration(identifier: string): IntegrationAccessor;
    get connections(): ConnectionsAccessor;
    connection(connectionSelector: string): ConnectionAccessor;
    get appEventTypes(): AppEventTypesAccessor;
    appEventType(id: string): AppEventTypeAccessor;
    get appEventSubscriptions(): AppEventSubscriptionsAccessor;
    appEventSubscription(selector: string | AppEventSubscriptionSelector): AppEventSubscriptionAccessor;
    get appEvents(): AppEventsAccessor;
    get flowRuns(): FlowRunsAccessor;
    flowRun(id: string): FlowRunAccessor;
    get appDataSchemas(): AppDataSchemasAccessor;
    appDataSchema(id: string): AppDataSchemaAccessor;
    get appDataSchemaInstances(): AppDataSchemaInstancesAccessor;
    appDataSchemaInstance(selector: string | AppDataSchemaInstanceSelector): AppDataSchemaInstanceAccessor;
    customer(selector: string | CustomerSelector): CustomerAccessor;
    get customers(): CustomersAccessor;
    scenario(selector: string): ScenarioAccessor;
    get scenarios(): ScenariosAccessor;
    connectionRequest(connectionId: string, uri: string, data?: any): Promise<any>;
}
export {};
