import { ErrorData } from '../errors';
export interface ConfigurationStateResult {
    state: ConfigurationState;
    message?: string;
    errors?: ErrorData[];
}
export declare enum ConfigurationState {
    CONFIGURED = "CONFIGURED",
    NOT_CONFIGURED = "NOT_CONFIGURED"
}
export declare enum WorkspaceElementType {
    Customer = "customer",
    Connector = "connector",
    Integration = "integration",
    Flow = "flow",
    FlowInstance = "flow-instance",
    FlowRun = "flow-run",
    Action = "action",
    Scenario = "scenario",
    ActionInstance = "action-instance",
    Connection = "connection",
    FieldMapping = "field-mapping",
    FieldMappingInstance = "field-mapping-instance",
    DataSource = "data-source",
    DataSourceInstance = "data-source-instance",
    DataLinkTable = "data-link-table",
    DataLinkTableInstance = "data-link-table-instance",
    AppEventType = "app-event-type",
    AppEventSubscription = "app-event-subscription",
    AppDataSchema = "app-data-schema",
    AppDataSchemaInstance = "app-data-schema-instance",
    ExternalEventSubscription = "external-event-subscription",
    ExternalEventLogRecord = "external-event-log-record",
    ExternalEventPull = "external-event-pull",
    Screen = "screen"
}
export declare enum WorkspaceEventType {
    ConnectionCreated = "connection.created",
    ConnectionDeleted = "connection.deleted",
    ConnectionDisconnected = "connection.disconnected",
    ConnectionReconnected = "connection.reconnected",
    FlowRunQueued = "flowRun.queued",
    FlowRunStarted = "flowRun.started",
    FlowRunCompleted = "flowRun.completed",
    FlowRunFailed = "flowRun.failed",
    FlowRunStopped = "flowRun.stopped"
}
export declare enum WorkspaceElementState {
    SETTING_UP = "SETTING_UP",
    CONFIGURATION_ERROR = "CONFIGURATION_ERROR",
    SETUP_FAILED = "SETUP_FAILED",
    READY = "READY"
}
export declare enum WorkspaceElementDependencyType {
    Configuration = "CONFIGURATION",
    Parent = "PARENT"
}
export interface WorkspaceElementCalculateStateResult {
    state: WorkspaceElementState;
    errors?: ErrorData[];
}
export interface WorkspaceElement {
    id: string;
    name: string;
    key: string;
    state?: WorkspaceElementState;
    errors?: ErrorData[];
}
export interface WorkspaceElementReference {
    type: WorkspaceElementType;
    id: string;
}
export interface WorkspaceElementDependency extends WorkspaceElementReference {
    dependencyType: WorkspaceElementDependencyType;
    data?: unknown;
}
