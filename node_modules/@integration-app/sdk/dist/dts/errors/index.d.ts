import { WorkspaceElementReference } from '../workspace-elements';
import { ErrorDoc } from './error-doc-enum';
export * from './error-doc-enum';
export declare enum ErrorType {
    BAD_REQUEST = "bad_request",
    CONNECTION = "connection",
    CONFIGURATION = "configuration",
    DEPENDENCY_ERROR = "dependency_error",
    FLOW_RUN = "flow_run",
    FLOW_INSTANCE_SETUP = "flow_instance_setup",
    CONCURRENCY = "concurrency",
    INTERNAL = "internal",
    ACTION_RUN = "action_run",
    ACTION_INSTANCE_SETUP = "action_instance_setup",
    UNIT_RUN = "unit_run"
}
export declare enum BadRequestErrorKey {
    NOT_FOUND = "not_found",
    NOT_AUTHENTICATED = "not_authenticated",
    ACCESS_DENIED = "access_denied",
    ALREADY_EXISTS = "already_exists",
    RATE_LIMIT_EXCEEDED = "rate_limit_exceeded"
}
export declare enum ConnectionErrorKey {
    CONNECTION_IS_DEFUNCT = "connection_is_defunct",
    ACCESS_TOKEN_EXPIRED = "access_token_expired",
    RATE_LIMIT_EXCEEDED = "rate_limit_exceeded"
}
export declare enum ConcurrencyErrorKey {
    LOCK_TIMEOUT = "lock_timeout"
}
interface ErrorDataFields {
    type?: ErrorType;
    key?: string;
    message: string;
    data?: any;
    doc?: ErrorDoc;
    stack?: any;
    causedByError?: ErrorData;
    logs?: any[];
}
type ErrorConstructorArg = string | ErrorDataFields | Error;
export declare function isIntegrationAppError(error: any): any;
export declare class ErrorData implements ErrorDataFields {
    constructor(arg: ErrorConstructorArg);
}
export interface ErrorData extends ErrorDataFields {
}
export declare class IntegrationAppError extends Error {
    isIntegrationAppError: true;
    data: ErrorData;
    constructor(arg: ErrorConstructorArg);
}
export declare class InternalError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class BadRequestError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ConcurrencyError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ConfigurationError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class DependencyError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg, workspaceElementReference?: WorkspaceElementReference);
}
export declare class FlowInstanceSetupError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class FlowRunError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ActionRunError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ActionInstanceSetupError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class UnitRunError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class ConnectionError extends IntegrationAppError {
    constructor(arg: ErrorConstructorArg);
}
export declare class NotFoundError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class RateLimitExceededError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class NotAuthenticatedError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare class AccessDeniedError extends BadRequestError {
    constructor(arg: ErrorConstructorArg);
}
export declare function getErrorFromData(data: any): any;
export declare function extractIntegrationAppErrorData(error: any): ErrorData;
export declare function buildUserFriendlyErrorMessage({ message, doc }: ErrorData): string;
