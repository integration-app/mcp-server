import { ElementAccessor, ElementInstanceAccessor, ElementInstanceListAccessor, ElementListAccessor } from '../accessors';
import { IntegrationAppApiClient } from '../api-client';
import { Action, ActionInstance, ActionInstanceSelector, ActionRunResponse, ActionSelector, CreateActionInstanceRequest, CreateActionRequest, FindActionInstancesQuery, FindActionsQuery, ListActionInstancesForConnectionQuery, ListActionsForIntegrationQuery, OpenActionConfigurationOptions, UpdateActionInstanceRequest, UpdateActionRequest } from './types';
import { InstanceKeyQuery } from '../integration-elements/common';
import { ConnectionLevelElementAccessor, ConnectionLevelElementsListAccessor } from '../integration-elements/connection-level-element.accessor';
import { IntegrationLevelElementAccessor, IntegrationLevelElementsListAccessor } from '../integration-elements/integration-level-element.accessor';
export declare class ActionsAccessor extends ElementListAccessor<Action, FindActionsQuery, CreateActionRequest> {
    constructor(client: IntegrationAppApiClient);
}
export declare class ActionAccessor extends ElementAccessor<Action, UpdateActionRequest, ActionSelector> {
    constructor(client: IntegrationAppApiClient, selector: ActionSelector | string);
    apply(integrationKeys: string[]): Promise<Action[]>;
    reset(): Promise<any>;
}
export declare class ActionInstancesAccessor extends ElementInstanceListAccessor<ActionInstance, FindActionInstancesQuery> {
    constructor(client: IntegrationAppApiClient);
}
export declare class ActionInstanceAccessor extends ElementInstanceAccessor<ActionInstance, ActionInstanceSelector, CreateActionInstanceRequest, UpdateActionInstanceRequest> {
    client: IntegrationAppApiClient;
    constructor(client: IntegrationAppApiClient, selector: string | ActionInstanceSelector);
    setup(): Promise<void>;
    reset(): Promise<void>;
    run(input?: any): Promise<ActionRunResponse>;
    open({ onClose, }?: OpenActionConfigurationOptions): Promise<void>;
}
export declare class IntegrationLevelActionAccessor extends IntegrationLevelElementAccessor<Action, UpdateActionRequest> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    actionSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string, actionSelector: string);
}
export declare class IntegrationLevelActionsListAccessor extends IntegrationLevelElementsListAccessor<Action, ListActionsForIntegrationQuery, Omit<CreateActionRequest, 'integrationId'>> {
    client: IntegrationAppApiClient;
    integrationSelector: string;
    constructor(client: IntegrationAppApiClient, integrationSelector: string);
}
export declare class ConnectionLevelActionAccessor extends ConnectionLevelElementAccessor<ActionInstance, UpdateActionInstanceRequest> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    actionSelector: string;
    query: InstanceKeyQuery;
    constructor(client: IntegrationAppApiClient, connectionSelector: string, actionSelector: string, query: InstanceKeyQuery);
    run(input?: any): Promise<ActionRunResponse>;
}
export declare class ConnectionLevelActionsAccessor extends ConnectionLevelElementsListAccessor<Action, ListActionInstancesForConnectionQuery> {
    client: IntegrationAppApiClient;
    connectionSelector: string;
    constructor(client: IntegrationAppApiClient, connectionSelector: string);
}
