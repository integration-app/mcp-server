import { ElementInstanceSelector, IntegrationSpecificElementSelector } from '../accessors';
import { ConnectionSelector } from '../connections';
import { DataSchema } from '../data-schema';
import { PaginationQuery } from '../entity-repository';
import { OpenConfigurationOptions } from '../iframe';
import { ElementInstanceFields, ElementTemplateFields } from '../integration-elements';
import { AppliedToIntegrations } from '../integrations';
import { ActionType } from './action-types';
import { WorkspaceElementDependency, WorkspaceElementState } from '../workspace-elements';
export declare enum ActionDependencyType {
    FieldMapping = "FieldMapping",
    DataSource = "DataSource"
}
export interface ActionDependency {
    type: ActionDependencyType;
    key: string;
    element?: any;
}
export interface Action extends ElementTemplateFields {
    type: ActionType;
    inputSchema?: DataSchema;
    config?: any;
    outputMapping?: any;
    customOutputSchema?: DataSchema;
    defaultOutputSchema?: DataSchema;
    transformedOutputSchema?: DataSchema;
    outputSchema?: DataSchema;
    appliedToIntegrations?: AppliedToIntegrations<Action>;
    dependencies?: WorkspaceElementDependency[];
    isDeployed?: boolean;
}
export interface ActionInstance extends ElementInstanceFields {
    type: ActionType;
    parent?: Action;
    instanceKey?: string;
    inputSchema?: any;
    config?: any;
    outputSchema?: any;
    isOutdated?: boolean;
    state: WorkspaceElementState;
}
export interface ListActionsForIntegrationQuery extends PaginationQuery {
    parentId?: string | 'null';
}
export interface FindActionsQuery extends ListActionsForIntegrationQuery {
    integrationId?: string | 'null';
}
export type CreateActionRequest = {
    key: string;
    name: string;
    type?: ActionType;
    inputSchema?: any;
    config?: any;
    integrationId?: string;
};
export type UpdateActionRequest = {
    key?: string;
    type?: ActionType;
    name?: string;
    inputSchema?: any;
    config?: any;
    archivedAt?: string;
};
export interface ActionSelector extends IntegrationSpecificElementSelector {
}
export interface ActionInstanceSelector extends ConnectionSelector, ElementInstanceSelector {
}
export type ListActionInstancesForConnectionQuery = PaginationQuery & {
    parentId?: string;
    universalParentId?: string;
};
export interface FindActionInstancesQuery extends ListActionInstancesForConnectionQuery {
    integrationKey?: string;
    integrationId?: string;
    userId?: string;
    connectionId?: string;
}
export interface CreateActionInstanceRequest {
    parentId: string;
    connectionId: string;
    config?: any;
}
export interface UpdateActionInstanceRequest {
    config?: any;
}
export interface OpenActionConfigurationOptions extends OpenConfigurationOptions {
}
export interface ActionRunResponse {
    output?: any;
    logs?: any[];
}
