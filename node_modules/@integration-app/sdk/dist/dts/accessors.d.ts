import { IntegrationAppApiClient } from './api-client';
import { PaginationResponse } from './entity-repository';
import { WorkspaceElementType } from './workspace-elements';
export interface BaseElementInstance {
    id: string;
}
export interface ElementInstanceSelector {
    id?: string;
    autoCreate?: boolean;
    instanceKey?: string;
    userId?: string;
    parentKey?: string;
    parentId?: string;
}
export interface IntegrationSpecificElementSelector {
    id?: string;
    key?: string;
    integrationId?: string;
    integrationKey?: string;
}
type SelectorType = {
    id?: string;
} | string;
export declare class ElementAccessor<Element, UpdateRequest, Selector extends SelectorType = string> {
    protected options: {
        client: IntegrationAppApiClient;
        path: string;
        selector: string | Selector;
    };
    constructor(options: {
        client: IntegrationAppApiClient;
        path: string;
        selector: string | Selector;
    });
    getUniqueIdentifier(): string;
    get(): Promise<Element>;
    put(data: UpdateRequest): Promise<Element>;
    patch(data: Partial<UpdateRequest>): Promise<Element>;
    archive(): Promise<void>;
    getPath(operation?: string): string;
}
export declare class ElementListAccessor<Element, FindQuery, CreateRequest> {
    private client;
    private path;
    constructor(client: IntegrationAppApiClient, path: string);
    find(query?: FindQuery): Promise<PaginationResponse<Element>>;
    findAll(query?: Omit<FindQuery, 'limit'>): Promise<Element[]>;
    create(data: CreateRequest): Promise<Element>;
}
export declare class ElementInstanceListAccessor<ElementInstance extends BaseElementInstance, FindQuery> {
    protected client: IntegrationAppApiClient;
    private path;
    constructor(client: IntegrationAppApiClient, path: string);
    find(query?: FindQuery): Promise<PaginationResponse<ElementInstance>>;
}
export declare class ElementInstanceAccessor<ElementInstance extends BaseElementInstance, Selector extends {
    id?: string;
}, CreateRequest, UpdateRequest> {
    protected options: {
        client: IntegrationAppApiClient;
        instancePath: string;
        selector: string | Selector;
        type?: WorkspaceElementType;
    };
    private id;
    constructor(options: {
        client: IntegrationAppApiClient;
        instancePath: string;
        selector: string | Selector;
        type?: WorkspaceElementType;
    });
    getUniqueIdentifier(): string;
    get(): Promise<ElementInstance>;
    getId(): Promise<string>;
    create(data?: CreateRequest): Promise<ElementInstance>;
    put(data: CreateRequest): Promise<ElementInstance>;
    patch(data: UpdateRequest): Promise<ElementInstance>;
    archive(): Promise<void>;
    delete(): Promise<void>;
    protected getPath(operation?: string): string;
    private getSelector;
}
export {};
