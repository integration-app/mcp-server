import { ConnectorAuth, RestApiClientOptions } from '../connectors';
import { DataSchema } from '../data-schema';
import { User } from '../users';
export declare enum WorkspaceOnboardingStep {
    AddConnectors = "add-connectors",
    ConnectYourApp = "connect-your-app",
    BuildIntegrations = "build-integrations",
    Completed = "completed"
}
export interface Workspace {
    id: string;
    key: string;
    secret: string;
    name: string;
    orgId: string;
    engineAccessToken?: string;
    createdAt: Date;
    updatedAt: Date;
    onboardingStep?: WorkspaceOnboardingStep;
    isGettingStartedCompleted?: boolean;
    trialEndDate?: string;
}
export interface EngineWorkspaceSettings {
    enableApiLogs?: boolean;
    enableWebhookLogs?: boolean;
    disableSecretKeyAuth?: boolean;
}
export interface EngineWorkspace {
    id: string;
    key: string;
    logoUri?: string;
    webhookUri?: string;
    publicKey?: string;
    enabledWebhookEvents?: string[];
    userFieldsSchema?: DataSchema;
    auth?: ConnectorAuth;
    credentialsSchema?: DataSchema;
    apiClient?: RestApiClientOptions;
    apiBaseUri?: string;
    apiRequestHeaders: Record<string, any>;
    apiRequestQuery: Record<string, any>;
    isOnPrem?: boolean;
    connectorBaseUri?: string;
    limits: WorkspaceLimits;
    settings?: EngineWorkspaceSettings;
    type?: WorkspaceType;
}
export interface WorkspaceUser {
    id: string;
    workspaceId: string;
    testCustomerId: string;
    userId: string;
    user: User;
    role: string;
}
export interface UserWorkspaceSettings {
    id: string;
    userId: string;
    workspaceId: string;
    testCustomerId: string;
}
export declare enum WorkspaceNotificationType {
    WorkspaceUpdate = "workspace-update",
    CopilotActivity = "copilot-activity"
}
export interface WorkspaceNotification<DataType = unknown> {
    type: WorkspaceNotificationType;
    workspaceId: string;
    data: DataType;
}
export interface CopilotActivityNotificationData {
    scopes: string[];
}
export declare const enum ParallelExecutionLimits {
    ParallelEventPulls = "parallelEventPulls",
    ParallelIncrementalEventPullsPerConnection = "parallelIncrementalEventPullsPerConnection",
    ParallelFullSyncEventPullsPerConnection = "parallelFullSyncEventPullsPerConnection",
    ParallelFlowRuns = "parallelFlowRuns",
    ParallelFlowRunsPerConnection = "parallelFlowRunsPerConnection",
    ParallelApiRequests = "parallelApiRequests",
    ParallelBackgroundJobs = "parallelBackgroundJobs",
    ParallelEventLogs = "parallelEventLogs",
    ParallelEventLogsPerConnection = "parallelEventLogsPerConnection"
}
export declare const enum RateLimits {
    fileUploadsMbPerHour = "fileUploadsMbPerHour",
    ApiRequestsPerSecond = "apiRequestsPerSecond",
    ApiRequestsPerHour = "apiRequestsPerHour",
    WebhookRequestsPerSecond = "webhookRequestsPerSecond",
    WebhookRequestsPerHour = "webhookRequestsPerHour",
    WorkspaceElementCreationsPerSecond = "workspaceElementCreationsPerSecond",
    WorkspaceElementCreationsPerHour = "workspaceElementCreationsPerHour",
    ExternalEventsPerCustomerPerDay = "externalEventsPerCustomerPerDay"
}
export declare const enum WorkspaceSizeLimits {
    TotalNumberOfCustomers = "totalNumberOfCustomers",
    TotalNumberOfConnections = "totalNumberOfConnections",
    TotalNumberOfWorkspaceElements = "totalNumberOfWorkspaceElements"
}
export declare const enum CustomerLimits {
    ParallelApiRequestsPerCustomer = "parallelApiRequestsPerCustomer",
    ParallelBackgroundJobsPerCustomer = "parallelBackgroundJobsPerCustomer",
    ApiRequestsPerCustomerPerSecond = "apiRequestsPerCustomerPerSecond",
    ApiRequestsPerCustomerPerHour = "apiRequestsPerCustomerPerHour",
    WebhookRequestsPerCustomerPerSecond = "webhookRequestsPerCustomerPerSecond",
    WebhookRequestsPerCustomerPerHour = "webhookRequestsPerCustomerPerHour"
}
export declare const enum LimitUnits {
    Number = "number",
    Msec = "msec",
    Mb = "Mb"
}
export interface WorkspaceLimit {
    value?: number;
    defaultValue?: number;
    unit: LimitUnits;
}
export interface WorkspaceLimits {
    [ParallelExecutionLimits.ParallelEventPulls]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelIncrementalEventPullsPerConnection]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelFullSyncEventPullsPerConnection]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelFlowRuns]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelFlowRunsPerConnection]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelApiRequests]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelBackgroundJobs]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelEventLogs]?: WorkspaceLimit;
    [ParallelExecutionLimits.ParallelEventLogsPerConnection]?: WorkspaceLimit;
    [RateLimits.fileUploadsMbPerHour]?: WorkspaceLimit;
    [RateLimits.ApiRequestsPerSecond]?: WorkspaceLimit;
    [RateLimits.ApiRequestsPerHour]?: WorkspaceLimit;
    [RateLimits.WebhookRequestsPerSecond]?: WorkspaceLimit;
    [RateLimits.WebhookRequestsPerHour]?: WorkspaceLimit;
    [RateLimits.WorkspaceElementCreationsPerSecond]?: WorkspaceLimit;
    [RateLimits.WorkspaceElementCreationsPerHour]?: WorkspaceLimit;
    [RateLimits.ExternalEventsPerCustomerPerDay]?: WorkspaceLimit;
    [WorkspaceSizeLimits.TotalNumberOfCustomers]?: WorkspaceLimit;
    [WorkspaceSizeLimits.TotalNumberOfConnections]?: WorkspaceLimit;
    [WorkspaceSizeLimits.TotalNumberOfWorkspaceElements]?: WorkspaceLimit;
    [CustomerLimits.ParallelApiRequestsPerCustomer]?: WorkspaceLimit;
    [CustomerLimits.ParallelBackgroundJobsPerCustomer]?: WorkspaceLimit;
    [CustomerLimits.ApiRequestsPerCustomerPerSecond]?: WorkspaceLimit;
    [CustomerLimits.ApiRequestsPerCustomerPerHour]?: WorkspaceLimit;
    [CustomerLimits.WebhookRequestsPerCustomerPerSecond]?: WorkspaceLimit;
    [CustomerLimits.WebhookRequestsPerCustomerPerHour]?: WorkspaceLimit;
}
export interface EngineWorkspaceWithOrgData {
    id: string;
    key: string;
    limits: WorkspaceLimits;
    workspaceId: string;
    workspaceName: string;
    orgId: string;
    orgName: string;
    type?: WorkspaceType;
    isTrial: string;
}
export declare enum WorkspaceType {
    PRODUCTION = "production",
    DEVELOPMENT = "development"
}
