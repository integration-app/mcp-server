import { Connection } from '../connections';
import { ErrorData } from '../errors';
import { Integration } from '../integrations';
import { Customer } from '../users';
export declare enum IntegrationElementLevel {
    UNIVERSAL = "universal",
    CONNECTOR = "connector",
    CONNECTION = "connection"
}
export declare enum IntegrationElementType {
    APP_DATA_SCHEMA = "app-data-schema",
    APP_EVENT_TYPE = "app-event-type",
    DATA_SOURCE = "data-source",
    SCHEMA = "schema",
    FIELD_MAPPING = "field-mapping",
    FLOW = "flow",
    INTEGRATION = "integration",
    ACTION = "action",
    DATA_LINK_TABLE = "data-link-table",
    EXTERNAL_EVENT = "external-event"
}
export interface ElementTemplateFields {
    id: string;
    key: string;
    name: string;
    revision: string;
    integrationId?: string;
    integration?: Integration;
    parentId?: string;
    parentRevision?: string;
    isCustomized?: boolean;
    createdAt?: string;
    updatedAt?: string;
    archivedAt?: string;
}
export interface ElementInstanceFields {
    id: string;
    name: string;
    revision: string;
    parentId?: string;
    parentRevision?: string;
    universalParentId?: string;
    userId: string;
    user?: Customer;
    instanceKey?: string;
    isCustomized?: boolean;
    connectionId: string;
    connection?: Connection;
    integrationId?: string;
    integration?: Integration;
    dependencies?: IntegrationElementInstance[];
    errors?: ErrorData[];
    createdAt?: string;
    updatedAt?: string;
    archivedAt?: string;
}
export interface IntegrationElement {
    type: IntegrationElementType;
    key?: string;
    id?: string;
    config?: any;
}
export interface IntegrationElementInstance {
    type: IntegrationElementType;
    instanceId?: string;
    data?: any;
}
export interface IntegrationElementInstanceDependency {
    fromType: IntegrationElementType;
    fromInstanceId: string;
    toType: IntegrationElementType;
    toInstanceId: string;
    data?: any;
}
