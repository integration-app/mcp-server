import { DataBuilderFormulaBase, ResolveFormulaParams } from './base';
export interface DataSchemaRegArgsDataCollection {
    type: 'data-collection';
    key: unknown;
    parameters?: unknown;
}
export interface DataSchemaRegArgsInternalDataSchema {
    type: 'internal-data-schema';
    key: unknown;
}
export type DataSchemaRefArgs = DataSchemaRegArgsDataCollection | DataSchemaRegArgsInternalDataSchema;
export declare class DataSchemaRef extends DataBuilderFormulaBase<DataSchemaRefArgs> {
    value: any;
    constructor(value: any);
    getValue(): undefined;
    resolveValue(params: ResolveFormulaParams): Promise<import("../..").DataSchema | undefined>;
    resolveDataCollection(args: DataSchemaRegArgsDataCollection, params: ResolveFormulaParams): Promise<import("../..").DataSchema | undefined>;
    resolveInternalDataSchema(args: DataSchemaRegArgsInternalDataSchema, params: ResolveFormulaParams): Promise<import("../..").DataSchema | undefined>;
    getSchema(): {
        type: string;
    };
}
