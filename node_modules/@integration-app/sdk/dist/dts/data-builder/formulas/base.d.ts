import { DataBuilderFormulaType } from './types';
import { DataCollectionSpec } from '../../connectors';
import { DataSchema } from '../../data-schema';
export interface DataBuilderFormula {
    resolveValue(params: ResolveFormulaParams): Promise<unknown>;
    getValue(variables: any): any;
    getSchema(variablesSchema: any): any;
    toObject(): any;
    toString(variablesSchema?: any): string;
}
export interface ResolveFormulaParams {
    variables?: unknown;
    schema?: DataSchema | undefined;
    getDataCollection?: (key: string, parameters?: Record<string, unknown>) => Promise<DataCollectionSpec>;
    getInternalDataSchema?: (key: string) => Promise<DataSchema>;
}
export declare abstract class DataBuilderFormulaBase<ArgsType = any> implements DataBuilderFormula {
    type: DataBuilderFormulaType;
    args: ArgsType;
    constructor(type: DataBuilderFormulaType, args: ArgsType);
    resolveValue(params: ResolveFormulaParams): Promise<any>;
    abstract getSchema(variablesSchema: any): any;
    toObject(): any;
    toString(_variablesSchema?: any): string;
    getVariableLocators(): string[];
    transformVars(transformations: any): any;
    abstract getValue(variables: any): any;
}
