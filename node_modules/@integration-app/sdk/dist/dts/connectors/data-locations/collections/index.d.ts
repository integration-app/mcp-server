import { DataSchema } from '../../../data-schema';
import { ConnectorDataLocationBase } from '../base';
import { ConnectorDataLocationMethod } from '../methods';
import { ConnectorDataCollectionEvent } from './events';
import { ConnectorDataCollectionMethodType } from './methods/base';
import { DataCollectionCreateConfigType } from './methods/create';
import { DataCollectionListConfigType } from './methods/list';
import { DataCollectionMatchConfigType } from './methods/match';
import { DataCollectionUpdateConfigType } from './methods/update';
export * from './events';
export declare const DataLocationTypeCollection: {
    spec: ConnectorDataCollectionMethodType<unknown>;
    recordFromFields: ConnectorDataCollectionMethodType<unknown>;
    customFieldsSchema: ConnectorDataCollectionMethodType<unknown>;
    fieldsFromApi: ConnectorDataCollectionMethodType<unknown>;
    fieldsToApi: ConnectorDataCollectionMethodType<unknown>;
    methods: {
        list: ConnectorDataCollectionMethodType<DataCollectionListConfigType>;
        findById: ConnectorDataCollectionMethodType<unknown>;
        match: ConnectorDataCollectionMethodType<DataCollectionMatchConfigType>;
        search: ConnectorDataCollectionMethodType<unknown>;
        create: ConnectorDataCollectionMethodType<DataCollectionCreateConfigType>;
        update: ConnectorDataCollectionMethodType<DataCollectionUpdateConfigType>;
        delete: ConnectorDataCollectionMethodType<unknown>;
        find: ConnectorDataCollectionMethodType<{
            queryFields: string[];
        }>;
    };
    recordToApi: ConnectorDataCollectionMethodType<unknown>;
    recordFromApi: ConnectorDataCollectionMethodType<unknown>;
    recordFromApiMapping: ConnectorDataCollectionMethodType<unknown>;
    recordFromApiCode: ConnectorDataCollectionMethodType<unknown>;
    fieldsToApiMapping: ConnectorDataCollectionMethodType<unknown>;
    fieldsToApiCode: ConnectorDataCollectionMethodType<unknown>;
};
export interface ConnectorDataCollection extends ConnectorDataLocationBase {
    type: 'collection';
    fieldsSchema?: DataSchema;
    isHidden?: boolean;
    customFields?: boolean;
    customFieldsSchema?: ConnectorDataLocationMethod;
    spec?: ConnectorDataLocationMethod;
    recordFromFields?: ConnectorDataLocationMethod;
    fieldsFromApi?: ConnectorDataLocationMethod;
    recordFromApi?: ConnectorDataLocationMethod;
    recordFromApiCode?: ConnectorDataLocationMethod;
    recordFromApiMapping?: ConnectorDataLocationMethod;
    recordToApi?: ConnectorDataLocationMethod;
    fieldsToApi?: ConnectorDataLocationMethod;
    fieldsToApiCode?: ConnectorDataLocationMethod;
    fieldsToApiMapping?: ConnectorDataLocationMethod;
    methods?: {
        list?: ConnectorDataLocationMethod<DataCollectionListConfigType>;
        findById?: ConnectorDataLocationMethod;
        match?: ConnectorDataLocationMethod<DataCollectionMatchConfigType>;
        search?: ConnectorDataLocationMethod;
        create?: ConnectorDataLocationMethod<DataCollectionCreateConfigType>;
        update?: ConnectorDataLocationMethod<DataCollectionUpdateConfigType>;
        delete?: ConnectorDataLocationMethod;
        find?: ConnectorDataLocationMethod<{
            queryFields?: string[];
        }>;
    };
    events?: Partial<Record<'created' | 'updated' | 'deleted', ConnectorDataCollectionEvent>>;
    udm?: Partial<Record<string, {
        extract?: ConnectorDataLocationMethod;
        parse?: ConnectorDataLocationMethod;
    }>>;
}
export declare const ConnectorDataCollectionMethodKeys: Array<keyof typeof DataLocationTypeCollection.methods>;
