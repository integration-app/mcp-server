import { ConnectorDataCollection } from './collections';
import { ConnectorDataDirectory } from './directories';
import { DataCollectionEvent, DataCollectionEventType, DataRecord } from '../../data-collections';
import { DataSchema } from '../../data-schema';
export type DataLocationSpec = DataCollectionSpec | DataDirectorySpec;
export declare enum DataLocationType {
    directory = "directory",
    collection = "collection"
}
export interface DataLocationListItem {
    key: string;
    name: string;
    type: DataLocationType;
    isHidden?: boolean;
}
export interface DataLocationPointer {
    key: string;
    parameters?: Record<string, any>;
    type?: DataLocationType;
}
export interface DataLocation {
    key?: string;
    parameters?: any;
    path?: string;
    name?: string;
    type?: DataLocationType;
    isDefault?: boolean;
    read?: boolean;
    write?: boolean;
}
export interface DataLocationMixin {
    key: string;
    parameters?: any;
}
interface DataLocationSpecBase {
    type: DataLocationType;
    key?: string;
    name: string;
    parametersSchema?: DataSchema;
}
export interface DataCollectionSpec extends DataLocationSpecBase {
    fieldsSchema?: DataSchema;
    list?: DataCollectionListSpec;
    search?: DataCollectionSearchSpec;
    match?: DataCollectionMatchSpec;
    findById?: DataCollectionFindByIdSpec;
    create?: DataCollectionCreateSpec;
    update?: DataCollectionUpdateSpec;
    delete?: DataCollectionDeleteSpec;
    events?: DataCollectionEventsSpec;
    customFields?: boolean;
    udm?: DataCollectionUdmsSpec;
    find?: DataCollectionFindSpec;
}
export interface ApiRequestSpec {
    path: any;
    method: any;
}
export declare enum DataDirectoryOperation {
    list = "list"
}
export interface DataDirectorySpec extends DataLocationSpecBase {
    locations?: DataLocation[];
}
export interface DataCollectionMethodSpec {
    apiRequests?: ApiRequestSpec[];
}
export interface DataCollectionFindSpec extends DataCollectionMethodSpec {
    queryFields?: string[];
}
export interface DataCollectionMatchSpec extends DataCollectionMethodSpec {
    fields?: string[];
}
export interface DataCollectionListSpec extends DataCollectionMethodSpec {
    filterFields?: string[];
}
export interface DataCollectionSearchSpec extends DataCollectionMethodSpec {
}
export interface DataCollectionFindByIdSpec extends DataCollectionMethodSpec {
}
export interface DataCollectionCreateSpec extends DataCollectionMethodSpec {
    fields?: string[];
    requiredFields?: string[];
    excludedFields?: string[];
}
export interface DataCollectionUpdateSpec extends DataCollectionMethodSpec {
    fields?: string[];
    excludedFields?: string[];
}
export interface DataCollectionDeleteSpec extends DataCollectionMethodSpec {
}
export type DataCollectionUdmSpec = {
    fields?: string[];
    extract?: Record<string, any>;
    parse?: Record<string, any>;
};
export type DataCollectionUdmsSpec = Record<string, DataCollectionUdmSpec>;
export type DataCollectionEventTypeSpec = {
    type: 'push' | 'pull';
    isFullScan?: boolean;
    isIdOnly?: boolean;
};
export type DataCollectionEventsSpec = {
    [value in DataCollectionEventType]: DataCollectionEventTypeSpec;
} & {
    all?: DataCollectionEventTypeSpec;
};
export interface DataCollectionMethodRequest {
    parameters?: Record<string, any>;
}
export interface DataCollectionFindRequest {
    query?: any;
    cursor?: string;
}
export interface DataCollectionFindResponse {
    records: DataRecord[];
    cursor?: string;
}
export interface DataCollectionListRequest extends DataCollectionMethodRequest {
    filter?: any;
    unifiedFilter?: any;
    cursor?: string;
}
export interface DataCollectionListResponseDrilldown {
    parameters?: Record<string, any>;
    filter?: Record<string, any>;
}
export interface DataCollectionListResponse {
    records: DataRecord[];
    drilldowns?: Array<DataCollectionListResponseDrilldown>;
    cursor?: string;
}
export interface DataCollectionSearchRequest extends DataCollectionMethodRequest {
    query: string;
    cursor?: string;
}
export interface DataCollectionSearchResponse {
    records: DataRecord[];
    cursor?: string;
}
export interface DataCollectionFindByIdRequest extends DataCollectionMethodRequest {
    id: string;
    udm?: string;
}
export interface DataCollectionFindByIdResponse {
    record: DataRecord;
}
export interface DataCollectionMatchRequest extends DataCollectionMethodRequest {
    query: Record<string, any>;
}
export interface DataCollectionMatchResponse {
    record?: DataRecord;
}
export interface DataCollectionCreateRequest extends DataCollectionMethodRequest {
    fields: Record<string, any>;
}
export interface DataCollectionCreateResponse {
    id: string;
}
export interface DataCollectionUpdateRequest extends DataCollectionMethodRequest {
    id: string;
    fields: Record<string, any>;
}
export interface DataCollectionUpdateResponse {
    id: string;
}
export interface DataCollectionDeleteRequest extends DataCollectionMethodRequest {
    id: string;
}
export interface DataCollectionDeleteResponse {
}
export interface DataCollectionSubscribeRequest extends DataCollectionMethodRequest {
    events?: {
        created?: boolean;
        updated?: boolean;
        deleted?: boolean;
    };
    udm?: string;
    webhookUri: string;
}
export interface DataCollectionSubscribeResponse {
    subscriptionId: string;
    pullIntervalSeconds?: number;
    cursor?: string;
}
export interface DataCollectionUpdateSubscriptionRequest extends DataCollectionSubscribeRequest {
    subscriptionId: string;
    cursor?: string;
}
export interface DataCollectionUpdateSubscriptionResponse extends Omit<DataCollectionSubscribeResponse, 'subscriptionId'> {
}
export interface DataCollectionUnsubscribeRequest {
    subscriptionId: string;
}
export interface DataCollectionUnsubscribeResponse {
}
export interface DataCollectionEventsRequest extends DataCollectionMethodRequest {
    subscriptionId: string;
    cursor: string;
}
export interface DataCollectionEventsResponse {
    events: DataCollectionEvent[];
    cursor?: string;
    state?: any;
}
export interface DataEventWebhookPayload {
    subscriptionId: string;
    events: DataCollectionEvent[];
}
export interface DataCollectionParseUnifiedFieldsRequest {
    udm: string;
    unifiedFields: Record<string, any>;
}
export interface DataCollectionParseUnifiedFieldsResponse {
    fields: any;
}
export interface DataDirectoryListRequest {
    cursor?: string;
}
export interface DataDirectoryListResponse {
    locations: DataLocation[];
    cursor?: string;
}
export declare const ConnectorDataLocationTypes: {
    collection: {
        spec: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        recordFromFields: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        customFieldsSchema: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        fieldsFromApi: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        fieldsToApi: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        methods: {
            list: import("./collections/methods/base").ConnectorDataCollectionMethodType<import("./collections/methods/list").DataCollectionListConfigType>;
            findById: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
            match: import("./collections/methods/base").ConnectorDataCollectionMethodType<import("./collections/methods/match").DataCollectionMatchConfigType>;
            search: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
            create: import("./collections/methods/base").ConnectorDataCollectionMethodType<import("./collections/methods/create").DataCollectionCreateConfigType>;
            update: import("./collections/methods/base").ConnectorDataCollectionMethodType<import("./collections/methods/update").DataCollectionUpdateConfigType>;
            delete: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
            find: import("./collections/methods/base").ConnectorDataCollectionMethodType<{
                queryFields: string[];
            }>;
        };
        recordToApi: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        recordFromApi: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        recordFromApiMapping: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        recordFromApiCode: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        fieldsToApiMapping: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
        fieldsToApiCode: import("./collections/methods/base").ConnectorDataCollectionMethodType<unknown>;
    };
    directory: {
        spec: import("./directories/methods/base").ConnectorDataDirectoryMethodType<unknown>;
        methods: {
            list: import("./directories/methods/base").ConnectorDataDirectoryMethodType<unknown>;
        };
    };
};
export type ConnectorDataLocation = ConnectorDataCollection | ConnectorDataDirectory;
export {};
