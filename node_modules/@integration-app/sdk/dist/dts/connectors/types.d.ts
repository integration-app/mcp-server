import { DataSchema } from '../data-schema';
import { UDM } from '../udm';
import { ConnectorAuth } from './auth';
import { DataLocation, DataLocationSpec } from './data-locations';
import { ConnectorMethodImplementation } from './methods';
import { ConnectorOperationHandler } from './operations';
import { ConnectorUdmSpec } from './udm';
export declare const CONNECTOR_CATEGORIES: readonly ["Accounting", "Ads", "Analytics", "ATS", "Communication", "CRM", "Customer Success", "Document Management", "E-Commerce", "E-Signature", "ERP", "File Storage", "HRIS", "Legal", "Marketing Automation", "Payments", "Project Management", "Sales", "Ticketing"];
export type Connector = ConnectorSpec & {
    id: string;
    key: string;
    name: string;
    categories: string[];
    logoUri: string;
    baseUri: string;
    revision?: string;
    status: ConnectorStatus;
    hasReadme?: boolean;
    hasDefaultParameters?: boolean;
    hasTest?: boolean;
    hasOperations?: boolean;
    hasData?: boolean;
    udms?: string[];
    isReadOnly?: boolean;
    workspaceId?: string;
};
export declare enum ConnectorStatus {
    production = "production",
    beta = "beta",
    planned = "planned"
}
export interface ConnectorUiSpec {
    schema?: DataSchema;
    description?: string;
    helpUri?: string;
    test?: boolean;
}
export type ConnectorDataUdmSpec = {
    rootLocation: DataLocation;
};
export type ConnectorDataSpec = {
    rootLocation?: DataLocation;
    locations?: DataLocationSpec[];
    udm?: Partial<Record<UDM, ConnectorDataUdmSpec>>;
    root?: DataLocation;
} & Partial<Record<UDM, DataLocation>>;
export type ConnectorApiType = 'openapi' | 'graphql';
export interface ConnectorSpec {
    key?: string;
    name?: string;
    appUri?: string;
    logoUri?: string;
    apiDocsUri?: string;
    api?: {
        type: ConnectorApiType;
    };
    ui?: ConnectorUiSpec;
    auth?: ConnectorAuth;
    parametersSchema?: DataSchema;
    data?: ConnectorDataSpec;
    udms?: string[];
    udm?: Record<string, ConnectorUdmSpec>;
    operations?: ConnectorOperationHandler[];
    test?: ConnectorMethodImplementation;
    hasReadme?: boolean;
    appUuid?: string;
    knowledgeBaseUuid?: string;
    workspaceId?: string;
}
export type MinimalConnector = {
    id: string;
    key: string;
    name: string;
    logoUri: string;
};
