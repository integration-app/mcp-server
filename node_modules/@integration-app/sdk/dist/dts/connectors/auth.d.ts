import { ConnectorSpec } from './types';
import { DataSchema } from '../data-schema';
import { ConnectorMethodImplementation, ConnectorMethodImplementationBase, ConnectorMethodImplementationType } from './methods';
export declare const CONNECTOR_AUTH_TYPES: readonly ["integration-app-token", "oauth2", "oauth1", "client-credentials", "proxy"];
export type ConnectorAuthType = (typeof CONNECTOR_AUTH_TYPES)[number];
export type ConnectorAuthSpec = {
    title?: string;
    description?: string;
    type: ConnectorAuthType;
    ui?: {
        schema?: DataSchema;
        helpUri?: string;
    };
};
export interface ConnectorAuthHandlerBase extends ConnectorAuthSpec {
    title?: string;
    type: ConnectorAuthType;
    credentialsSchema?: DataSchema;
    customCredentialsSchema?: DataSchema;
    makeApiClient?: ConnectorMethodImplementationBase;
    refreshCredentials?: ConnectorMethodImplementationBase;
    test?: ConnectorMethodImplementationBase;
    enabled?: any;
}
interface ConnectorAuthMethodArgs {
    connectorSpec?: ConnectorSpec;
    authOptionKey?: string;
}
interface ConnectorAuthMethodType {
    authTypes?: ConnectorAuthType[];
    fileKeys?: string[];
    getInputSchema?: (args: ConnectorAuthMethodArgs) => DataSchema | undefined;
    getOutputSchema?: (args: ConnectorAuthMethodArgs) => DataSchema | undefined;
    supportedImplementationTypes: ConnectorMethodImplementationType[];
    isRequired: boolean;
}
export declare const ConnectorAuthMethodTypes: Record<string, ConnectorAuthMethodType>;
export interface ConnectorAuthOAuth2 extends ConnectorAuthHandlerBase {
    type: 'oauth2';
    getOAuthConfig?: ConnectorMethodImplementation;
    getTokenData?: ConnectorMethodImplementation;
    getCredentialsFromAccessTokenResponse?: ConnectorMethodImplementation;
    getCredentialsFromRefreshTokenResponse?: ConnectorMethodImplementation;
    oAuthConfig?: ConnectorMethodImplementation;
}
export interface ConnectorAuthOAuth1 extends ConnectorAuthHandlerBase {
    type: 'oauth1';
    getOAuthConfig?: ConnectorMethodImplementation;
}
export interface ConnectorAuthClientCredentials extends ConnectorAuthHandlerBase {
    type: 'client-credentials';
    getCredentialsFromConnectionParameters?: ConnectorMethodImplementationBase;
}
export interface ConnectorAuthProxy extends ConnectorAuthHandlerBase {
    type: 'proxy';
    proxyKey: string;
}
export interface ConnectorAuthIntegrationAppToken extends ConnectorAuthHandlerBase {
    type: 'integration-app-token';
}
export type ConnectorAuth = (ConnectorAuthOAuth2 | ConnectorAuthOAuth1 | ConnectorAuthClientCredentials | ConnectorAuthIntegrationAppToken | ConnectorAuthProxy) & {
    options?: {
        [key: string]: ConnectorAuthOAuth2 | ConnectorAuthOAuth1 | ConnectorAuthClientCredentials | ConnectorAuthIntegrationAppToken | ConnectorAuthProxy;
    };
};
export interface ConnectorAuthOAuth2Config {
    clientId: any;
    clientSecret: any;
    authorizeUri: any;
    tokenUri: any;
    scopes?: any;
    clientAuthLocation?: 'body' | 'headers';
    noRefreshToken?: boolean;
    skipPkce?: boolean;
    skipClientAuthInBody?: boolean;
    skipClientAuthInHeaders?: boolean;
    extra?: Record<string, any>;
}
export type ConnectorAuthOAuthConfig = ConnectorAuthOAuth2Config;
export interface ConnectorAuthOAuth1Config {
    consumerKey: any;
    consumerSecret: any;
    requestTokenUri: any;
    authorizeUri: any;
    tokenUri: any;
    extra?: Record<string, any>;
}
export declare const OAUTH_CONFIG_SCHEMA: {
    type: string;
    properties: {
        clientId: {
            type: string;
        };
        clientSecret: {
            type: string;
        };
        authorizeUri: {
            type: string;
            description: string;
        };
        tokenUri: {
            type: string;
            description: string;
        };
        scopes: {
            type: string;
            items: {
                type: string;
            };
        };
        clientAuthLocation: {
            type: string;
            enum: string[];
            default: string;
            description: string;
        };
        noRefreshToken: {
            type: string;
            description: string;
        };
        skipPkce: {
            type: string;
            description: string;
        };
        extra: {
            type: string;
            additionalProperties: boolean;
            description: string;
        };
        skipClientAuthInBody: {
            type: string;
            description: string;
        };
        skipClientAuthInHeader: {
            type: string;
            description: string;
        };
    };
};
export declare const OAUTH1_CONFIG_SCHEMA: {
    type: string;
    properties: {
        consumerKey: {
            type: string;
        };
        consumerSecret: {
            type: string;
        };
        requestTokenUri: {
            type: string;
        };
        authorizeUri: {
            type: string;
        };
        tokenUri: {
            type: string;
        };
        scopes: {
            type: string;
            items: {
                type: string;
            };
        };
        extra: {
            type: string;
            additionalProperties: boolean;
            description: string;
        };
    };
};
export {};
